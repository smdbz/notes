<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="HTTP" id="Writerside-Note-Template">

    <tldr>
        <p>
            <control>Audience:</control>
            Me in six-months time (hello Zak)
        </p>
        This serves as a reminder of the API parameters available to you.
    </tldr>
    <chapter title="4 Types of API Parameters" id="4-types-of-api-parameters">
        <p>There are four main types of request params:</p>

        <chapter title="Query Parameters" id="query-parameters">
            <p>Query parameters are the most common type. They are appended to the URL path after a ? character:</p>
            <code-block lang="">
                /users?page=1&amp;per_page=20
                </code-block>
            <p>Query params work well for filtering, sorting, pagination, and simple lookups.</p>

        </chapter>

        <chapter title="Path Parameters" id="path-parameters">
            <p>Path parameters are embedded into the URL path itself:</p>

            <code-block lang="">
            /users/{userId}
                </code-block>

            <p>This allows identifiers and fixed attributes to appear directly in the resource path for more RESTful,
                self-documenting APIs. Path params are also required for many URI patterns like collection/element.</p>
            <p>Most modern API frameworks like Express support both query and path parameters.</p>
        </chapter>

        <chapter title="Header Parameters" id="header-parameters">
            <p>Header parameters are components of an HTTP request that contain metadata about the request or the client
                making the request. They typically include information like the content type of the request body,
                authentication credentials, cache controls, and more. These parameters are transmitted in the request
                header, separate from the request body.

                For example:</p>

            <code-block>Content-Type: application/json
            Authorization: Bearer &lt;token&gt;</code-block>
        </chapter>
        <chapter title="Request Body Parameters" id="request-body-parameters">
            <p>Request body parameters are the data sent along with the request in the body of the HTTP message. They
                carry
                the actual payload or data that the client wants to send to the server. These parameters are commonly
                used
                in POST, PUT, and PATCH requests to transmit data like JSON objects, form data, or file uploads.

                For example:</p>

            <code-block>
            {
            "username": "example",
            "password": "password123"
            }
            </code-block>
        </chapter>
    </chapter>
    <chapter title="HTTP Methods" id="http-methods">
        <table>
            <tr>
                <td>HTTP method</td>
                <td>Description</td>
            </tr>
            <tr>
                <td>GET</td>
                <td>Returns the requested resource. If not found, returns a 404 Not Found status code.</td>
            </tr>
            <tr>
                <td>POST</td>
                <td>Creates a record. The POST request always comes with an HTTP request body containing JSON or Form
                    URL encoded data, which is also called a payload. If the data is valid, the API endpoint will create
                    a new resource based on these data. Although you can create multiple resources with a single POST
                    call, it is not considered a best practice to do so.
                </td>

            </tr>
            <tr>
                <td>PUT</td>
                <td>Instructs the API to replace a resource. Like a POST request, the PUT request also comes with data.
                    A PUT request usually supplies all data for a particular resource so that the API developer can
                    fully replace that resource with the provided data. A PUT request deals with a single resource.
                </td>
            </tr>
            <tr>
                <td>PATCH</td>
                <td> Tells the API to update a part of the resource. Note the difference between a PUT and a PATCH call.
                    A PUT call replaces the complete resource, while the PATCH call only updates some parts. A PATCH
                    request also deals with a single record.
                </td>
            </tr>
            <tr>
                <td>DELETE</td>
                <td> Instructs the API to delete a resource.
                </td>
            </tr>
        </table>
    </chapter>


</topic>